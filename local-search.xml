<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>扫码登录的简单实现</title>
    <link href="/2021/09/21/%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/09/21/%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文将介绍基于<code>SpringBoot + Vue + Android</code>实现的扫码登录<code>demo</code>的总体思路，完整代码已上传到<a href="https://github.com/zhangjiwei1221/qrscan">GitHub</a>。<code>Web</code>端体验地址：<a href="http://42.192.64.144/qr">http://42.192.64.144/qr</a>，<code>apk</code>下载地址：<a href="https://github.com/zhangjiwei1221/qrscan/releases/tag/0.0.2%E3%80%82">https://github.com/zhangjiwei1221/qrscan/releases/tag/0.0.2。</a> 用户名：非空即可，密码：123456，效果见文末，整体实现如有不妥之处，欢迎交流讨论，实现部分参考<a href="https://juejin.cn/post/6940976355097985032">二维码扫码登录是什么原理</a>。</p><h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p>后端：<code>SpringBoot</code>，<code>Redis</code>。<br>前端：<code>Vue</code>，<code>Vue Router</code>、<code>VueX</code>、<code>Axios</code>、<code>vue-qr</code>、<code>ElemntUI</code>。<br>安卓：<code>ZXing</code>、<code>XUI</code>、<code>YHttp</code>。</p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>总体的扫码登录和<code>OAuth2.0</code>的验证逻辑相似，如下所示：</p><p><img src="https://gitee.com/zhangjiwei1221/note/raw/master/img/20210921205657.png" alt="image-20210921205657426"></p><p>用户选择扫码登录可以看作是<code>A</code>：前端发授权请求，等待<code>app</code>扫码。<br>用户使用<code>app</code>进行扫码可以看作是<code>B</code>：扫码进行授权，返回一个临时<code>Token</code>供二次认证。<br>用户在<code>app</code>进行确认登录可以看作是<code>C</code>：进行登录确认，授权用户在<code>Web</code>端登录。<br>后端在用户确认登录后返回一个正式<code>Token</code>即可看作是步骤<code>D</code>。<br>后续前端根据正式<code>Token</code>访问后台接口，正在在<code>Web</code>端进行操作即可看作是<code>E</code>和<code>F</code>。</p><p><strong>二次认证的原因</strong></p><p>之所以在用户扫码之后还需要进行再一次的确认登录，而不是直接就登录的原因，则是为了用户安全考虑，避免用户扫了其他人需要登录的二维码，在未经确认就直接登录了，导致他人可能会在我们不知道的情况下访问我们的信息。</p><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><ol><li><p>用户访问网页端，选择扫码登录</p><p>用户在选择扫码登录时，会向后端发送一个二维码的生成请求，后端生成<code>UUID</code>，并保存到<code>Redis</code>（固定有效时间），状态设置为<code>UNUSED</code>（未使用）状态，如果<code>Redis</code>缓存过期，则为<code>EXPIRE</code>（过期）状态，前端根据后端返回的内容生成二维码，并设置一个定时器，每隔一段时间根据二维码的内容中的<code>UUID</code>，向后端发送请求，获取二维码的状态，更新界面展示的内容。</p><p>生成二维码后端接口：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成二维码内容</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(&quot;/generate&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> BaseResult <span class="hljs-title">generate</span><span class="hljs-params">()</span> </span>&#123;<br>    String code = IdUtil.simpleUUID();<br>    redisCache.setCacheObject(code, CodeUtils.getUnusedCodeInfo(), <br>                              DEFAULT_QR_EXPIRE_SECONDS, TimeUnit.SECONDS);<br>    <span class="hljs-keyword">return</span> BaseResult.success(GENERATE_SUCCESS, code);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>前端获取内容，生成二维码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">getToken</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.codeStatus = <span class="hljs-string">&#x27;EMPTY&#x27;</span><br>    <span class="hljs-built_in">this</span>.tip = <span class="hljs-string">&#x27;正在获取登录码，请稍等&#x27;</span><br>    <span class="hljs-comment">// 有效时间 60 秒</span><br>    <span class="hljs-built_in">this</span>.effectiveSeconds = <span class="hljs-number">60</span><br>    <span class="hljs-built_in">clearInterval</span>(<span class="hljs-built_in">this</span>.timer)<br>    request(&#123;<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/code/generate&#x27;</span><br>    &#125;).then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 请求成功, 设置二维码内容, 并更新相关信息</span><br>        <span class="hljs-built_in">this</span>.code = <span class="hljs-string">`<span class="hljs-subst">$&#123;HOST&#125;</span>/code/scan?code=<span class="hljs-subst">$&#123;response.data&#125;</span>`</span><br>        <span class="hljs-built_in">this</span>.codeStatus = <span class="hljs-string">&#x27;UNUSED&#x27;</span><br>        <span class="hljs-built_in">this</span>.tip = <span class="hljs-string">&#x27;请使用手机扫码登录&#x27;</span><br>        <span class="hljs-built_in">this</span>.timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-built_in">this</span>.getTokenInfo, <span class="hljs-number">2000</span>)<br>    &#125;).catch(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.getToken()<br>    &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>后端返回二维码状态信息的接口：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取二维码状态信息</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> code 二维码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(&quot;/info&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> BaseResult <span class="hljs-title">info</span><span class="hljs-params">(String code)</span> </span>&#123;<br>    CodeVO codeVO = redisCache.getCacheObject(code);<br>    <span class="hljs-keyword">if</span> (codeVO == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> BaseResult.success(INVALID_CODE, StringUtils.EMPTY);<br>    &#125;<br>    <span class="hljs-keyword">return</span> BaseResult.success(GET_SUCCESS, codeVO);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>前端轮询获取二维码状态：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">getTokenInfo</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.effectiveSeconds--<br>    <span class="hljs-comment">// 二维码过期</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.effectiveSeconds &lt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">this</span>.codeStatus = <span class="hljs-string">&#x27;EXPIRE&#x27;</span><br>        <span class="hljs-built_in">this</span>.tip = <span class="hljs-string">&#x27;二维码已过期，请刷新&#x27;</span><br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">// 轮询查询二维码状态</span><br>    request(&#123;<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/code/info&#x27;</span>,<br>        <span class="hljs-attr">params</span>: &#123;<br>            <span class="hljs-attr">code</span>: <span class="hljs-built_in">this</span>.code.substr(<span class="hljs-built_in">this</span>.code.indexOf(<span class="hljs-string">&#x27;=&#x27;</span>) + <span class="hljs-number">1</span>)<br>        &#125;<br>    &#125;).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> codeVO = response.data<br>        <span class="hljs-comment">// 二维码过期</span><br>        <span class="hljs-keyword">if</span> (!codeVO || !codeVO.codeStatus) &#123;<br>            <span class="hljs-built_in">this</span>.codeStatus = <span class="hljs-string">&#x27;EXPIRE&#x27;</span><br>            <span class="hljs-built_in">this</span>.tip = <span class="hljs-string">&#x27;二维码已过期，请刷新&#x27;</span><br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-comment">// 二维码状态为为正在登录</span><br>        <span class="hljs-keyword">if</span> (codeVO.codeStatus === <span class="hljs-string">&#x27;CONFIRMING&#x27;</span>) &#123;<br>            <span class="hljs-built_in">this</span>.username = codeVO.username<br>            <span class="hljs-built_in">this</span>.avatar = codeVO.avatar<br>            <span class="hljs-built_in">this</span>.codeStatus = <span class="hljs-string">&#x27;CONFIRMING&#x27;</span><br>            <span class="hljs-built_in">this</span>.tip = <span class="hljs-string">&#x27;扫码成功，请在手机上确认&#x27;</span><br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-comment">// 二维码状态为确认登录</span><br>        <span class="hljs-keyword">if</span> (codeVO.codeStatus === <span class="hljs-string">&#x27;CONFIRMED&#x27;</span>) &#123;<br>            <span class="hljs-built_in">clearInterval</span>(<span class="hljs-built_in">this</span>.timer)<br>            <span class="hljs-keyword">const</span> token = codeVO.token<br>            store.commit(<span class="hljs-string">&#x27;setToken&#x27;</span>, token)<br>            <span class="hljs-built_in">this</span>.$router.push(<span class="hljs-string">&#x27;/home&#x27;</span>)<br>            Message.success(<span class="hljs-string">&#x27;登录成功&#x27;</span>)<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>使用手机扫码，二维码状态改变</p><p>当用户使用手机扫码时（已登录并且为正确的<code>app</code>，否则扫码会跳转到自定义的宣传页），会更新二维码的状态为<code>CONFIRMING</code>（待确认）状态，并在<code>Redis</code>缓存中新增用户名及头像信息的保存供前端使用展示，此外还会返回用户的登录信息（登录地址、浏览器、操作系统）给<code>app</code>展示，同时生成一个临时<code>Token</code>给<code>app</code>（固定有效时间）。</p><p>用户扫码时的后台处理：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 处理未使用状态的二维码</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> code 二维码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> token token</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> BaseResult <span class="hljs-title">handleUnusedQr</span><span class="hljs-params">(String code, String token)</span> </span>&#123;<br>    <span class="hljs-comment">// 校验 app 端访问传递的 token</span><br>    <span class="hljs-keyword">boolean</span> isLegal = JwtUtils.verify(token);<br>    <span class="hljs-keyword">if</span> (!isLegal) &#123;<br>        <span class="hljs-keyword">return</span> BaseResult.error(AUTHENTICATION_FAILED);<br>    &#125;<br>    <span class="hljs-comment">// 保存用户名、头像信息, 供前端展示</span><br>    String username = JwtUtils.getUsername(token);<br>    CodeVO codeVO = CodeUtils.getConfirmingCodeInfo(username, DEFAULT_AVATAR_URL);<br>    redisCache.setCacheObject(code, codeVO, DEFAULT_QR_EXPIRE_SECONDS, TimeUnit.SECONDS);<br>    <span class="hljs-comment">// 返回登录地址、浏览器、操作系统以及一个临时 token 给 app</span><br>    String address = HttpUtils.getRealAddressByIp();<br>    String browser = HttpUtils.getBrowserName();<br>    String os = HttpUtils.getOsName();<br>    String tmpToken = JwtUtils.sign(username);<br>    <span class="hljs-comment">// 将临时 token 作为键, 用户名为内容存储在 redis 中</span><br>    redisCache.setCacheObject(tmpToken, username, DEFAULT_TEMP_TOKEN_EXPIRE_MINUTES, TimeUnit.MINUTES);<br>    LoginInfoVO loginInfoVO = <span class="hljs-keyword">new</span> LoginInfoVO(address, browser, os, tmpToken);<br>    <span class="hljs-keyword">return</span> BaseResult.success(SCAN_SUCCESS, loginInfoVO);<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>手机确认登录</p><p>当用户在<code>app</code>中点击确认登录时，就会携带生成的临时<code>Token</code>发送更新状态的请求，二维码的状态会被更新为<code>CONFIRMED</code>（已确认登录）状态，同时后端会生成一个正式<code>Token</code>保存在<code>Redis</code>中，前端在轮询更新状态时获取这个<code>Token</code>，然后使用这个<code>Token</code>进行登录。</p><p>后端处理确认登录的代码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 处理未待确认状态的二维码</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> code 二维码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> token token</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> BaseResult <span class="hljs-title">handleConfirmingQr</span><span class="hljs-params">(String code, String token)</span> </span>&#123;<br>    <span class="hljs-comment">// 使用临时 token 获取用户名, 并从 redis 中删除临时 token</span><br>    String username = redisCache.getCacheObject(token);<br>    <span class="hljs-keyword">if</span> (StringUtils.isBlank(username)) &#123;<br>        <span class="hljs-keyword">return</span> BaseResult.error(AUTHENTICATION_FAILED);<br>    &#125;<br>    redisCache.deleteObject(token);<br>    <span class="hljs-comment">// 根据用户名生成正式 token并保存在 redis 中供前端使用</span><br>    String formalToken = JwtUtils.sign(username);<br>    CodeVO codeVO = CodeUtils.getConfirmedCodeInfo(username, DEFAULT_AVATAR_URL, formalToken);<br>    redisCache.setCacheObject(code, codeVO, DEFAULT_QR_EXPIRE_SECONDS, TimeUnit.SECONDS);<br>    <span class="hljs-keyword">return</span> BaseResult.success(CONFIRM_SUCCESS);<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h2><p><img src="https://img-blog.csdnimg.cn/9336ffbcb73f4fa791228279e660507a.gif#pic_center" alt="动画"></p><p><img src="https://img-blog.csdnimg.cn/a3f87ea99cd24f5ab088871c70fb37e6.gif#pic_center" alt="动画"></p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Vue</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
